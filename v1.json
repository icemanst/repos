{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "signoSign/Universal REST Webservice",
    "description" : "Webservice for controlling and integrating signoSign/Universal",
    "contact" : {
      "url" : "https://signotec.com",
      "email" : "helpdesk@signote.de"
    },
    "license" : {
      "name" : "signotec End User Software License Agreement"
    },
    "version" : "1.0"
  },
  "servers" : [ {
    "url" : "/signoSignUniversal/rest/",
    "variables" : { }
  } ],
  "paths" : {
    "/debug" : {
      "get" : {
        "tags" : [ "Base" ],
        "operationId" : "debug",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/instancetoken" : {
      "post" : {
        "tags" : [ "Base" ],
        "summary" : "Generates instance token",
        "description" : "Issues an API-Key. The key is expected in the authentication header of every secured call and is valid until revokeApiKey is called.",
        "operationId" : "generateApiKey",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "username" : {
                    "type" : "string",
                    "description" : "The user name."
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "The password.",
                    "format" : "password"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Instance token to authenticate",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied - Wrong credentials"
          }
        }
      },
      "delete" : {
        "tags" : [ "Base" ],
        "summary" : "Revokes instance token",
        "description" : "Revokes an API-Key. The instance token from the current request gets invalidated.",
        "operationId" : "revokeApiKey",
        "responses" : {
          "200" : {
            "description" : "instance token revoked",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/metadata" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets metadata of a persisted document",
        "description" : "Gets meta information of a persisted document, like save time stamp, if it is a template etc.",
        "operationId" : "getDocumentMetadata",
        "parameters" : [ {
          "name" : "documentId",
          "in" : "path",
          "description" : "The id of the document to query meta informations from.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/documents" : {
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Persists a document",
        "description" : "Uploads and saves a new document to the database. The document can be accessed with the identifier in the meta data provided by the response.",
        "operationId" : "postDocument",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostDocumentParams"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns the meta data of the uploaded document.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentDbe"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Documents" ],
        "summary" : "Deletes multiple documents",
        "description" : "Deletes all documents from the database that matches the given predicates.",
        "operationId" : "deleteDocuments",
        "parameters" : [ {
          "name" : "documentId",
          "in" : "query",
          "description" : "The id of the document to be queried.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "parentId",
          "in" : "query",
          "description" : "The id of the parent document to be queried.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ownerId",
          "in" : "query",
          "description" : "The owner id (user name) of the document to be queried.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileName",
          "in" : "query",
          "description" : "The file name of the document to be queried.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "screenName",
          "in" : "query",
          "description" : "The screen name of the document to be queried.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timestampCreationLaterThan",
          "in" : "query",
          "description" : "Queries all documents with a creation time stamp later than this value.",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "timestampModificationLaterThan",
          "in" : "query",
          "description" : "Queries all documents with a modification time stamp later than this value.",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/documents/{documentId}" : {
      "delete" : {
        "tags" : [ "Documents" ],
        "summary" : "Deletes a single document",
        "description" : "Deletes the document with the given identifier from the database.",
        "operationId" : "deleteDocument",
        "parameters" : [ {
          "name" : "documentId",
          "in" : "path",
          "description" : "The identifier of the document.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/documents/{documentId}/filedata" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets the file content of a document",
        "description" : "Loads the file content of a document with the given identifier from the database.",
        "operationId" : "getDocumentFileData",
        "parameters" : [ {
          "name" : "documentId",
          "in" : "path",
          "description" : "The identifier of the requested document.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the binary file content of the document",
            "content" : {
              "application/pdf" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/documents/{documentId}/sharingcases" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets sharing cases",
        "description" : "Get all sharing cases to a given document id.",
        "operationId" : "getDocumentSharingcases",
        "parameters" : [ {
          "name" : "documentId",
          "in" : "path",
          "description" : "The id of the document whose sharing cases should be returned",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns sharing case data of a document to a document.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SharingCaseDbe"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/documents/metadata" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets metadata of multiple persisted documents",
        "description" : "Gets meta information of persisted documents that matches the given predicates.",
        "operationId" : "getDocumentsMetadata",
        "parameters" : [ {
          "name" : "documentId",
          "in" : "query",
          "description" : "The id of the document to be queried.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "parentId",
          "in" : "query",
          "description" : "The id of the parent document to be queried.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ownerId",
          "in" : "query",
          "description" : "The owner id (user name) of the document to be queried.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileName",
          "in" : "query",
          "description" : "The file name of the document to be queried.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "screenName",
          "in" : "query",
          "description" : "The screen name of the document to be queried.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timestampCreationLaterThan",
          "in" : "query",
          "description" : "Queries all documents with a creation time stamp later than this value.",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "timestampModificationLaterThan",
          "in" : "query",
          "description" : "Queries all documents with a modification time stamp later than this value.",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/keystores/assignments" : {
      "get" : {
        "tags" : [ "Keystores" ],
        "summary" : "Assigns a keystore to user",
        "description" : "Assigns keystore to user for a purpose. The required values are depended on the used keystore type and its purpose.",
        "operationId" : "getKeystoreAssignments",
        "parameters" : [ {
          "name" : "documentId",
          "in" : "query",
          "description" : "The id of the assignment to be queried.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ownerId",
          "in" : "query",
          "description" : "The id of the owner (user name).",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "purpose",
          "in" : "query",
          "description" : "The purpose of the assignment.",
          "schema" : {
            "type" : "string",
            "enum" : [ "SIGNING", "SIGNATURE_ENCRYPTION" ]
          }
        }, {
          "name" : "alias",
          "in" : "query",
          "description" : "The alias of the assignment.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Keystores" ],
        "summary" : "Assigns a keystore to user",
        "description" : "Assigns keystore to user for a purpose. The required values are depended on the used keystore type and its purpose.",
        "operationId" : "postKeystoreAssignment",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostKeystoreAssignmentParams"
              }
            }
          }
        },
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/keystores/assignments/{asssignmentId}" : {
      "get" : {
        "tags" : [ "Keystores" ],
        "summary" : "Assigns a keystore to user",
        "description" : "Assigns keystore to user for a purpose. The required values are depended on the used keystore type and its purpose.",
        "operationId" : "getKeystoreAssignment",
        "parameters" : [ {
          "name" : "asssignmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Keystores" ],
        "summary" : "Revokes a keystore assignments",
        "description" : "Revokes a Keystore assignment. The entry will be removed from the database.",
        "operationId" : "deleteKeystoreAssignment",
        "parameters" : [ {
          "name" : "asssignmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Keystores" ],
        "summary" : "Patches an keystore assignment",
        "description" : "Patches an keystore assignment. If the change contains the 'active'-flag, all other assignments of the given user and purpose will be deactivated.",
        "operationId" : "patchKeystoreAssignment",
        "parameters" : [ {
          "name" : "asssignmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostKeystoreAssignmentParams"
              }
            }
          }
        },
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/keystores/{keystoreDataId}" : {
      "delete" : {
        "tags" : [ "Keystores" ],
        "summary" : "Deletes a keystore",
        "description" : "Deletes a keystore from the database. All associated assignments will be revoked in that process.",
        "operationId" : "deleteKeystoreData",
        "parameters" : [ {
          "name" : "keystoreDataId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/keystores" : {
      "post" : {
        "tags" : [ "Keystores" ],
        "summary" : "Uploads a keystore",
        "description" : "Uploads a keystore. The keystore type is the string that is used to get an instance of that keystore i.e. every keystore is supported that has an java implementation.",
        "operationId" : "postKeystoreData",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostKeystoreParams"
              }
            }
          }
        },
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/sharingcases/{sharingcaseId}" : {
      "get" : {
        "tags" : [ "Sharing cases" ],
        "summary" : "Get sharing cases infos",
        "description" : "Get all sharing cases to a given document id.",
        "operationId" : "getSharingcase",
        "parameters" : [ {
          "name" : "sharingcaseId",
          "in" : "path",
          "description" : "The id of the sharing case to query.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Sharing cases" ],
        "summary" : "Alters sharing case",
        "description" : "Alters an existing sharing case.",
        "operationId" : "patchSharingCase",
        "parameters" : [ {
          "name" : "sharingcaseId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchSharingcaseParams"
              }
            }
          }
        },
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/sharingcases" : {
      "get" : {
        "tags" : [ "Sharing cases" ],
        "summary" : "Get sharing cases",
        "description" : "Gets all sharing cases matching the predicates.",
        "operationId" : "getSharingcases",
        "responses" : {
          "200" : {
            "description" : "The document were closed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SharingCaseDbe"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Sharing cases" ],
        "summary" : "Creates sharing case",
        "description" : "Creates a sharing case for the given document id.",
        "operationId" : "postSharingcase",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostSharingcaseParams"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns the binary data of the document",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SharingCaseDbe"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/cookies" : {
      "get" : {
        "tags" : [ "Viewer" ],
        "summary" : "Gets all cookies associated with the instance token",
        "description" : "Returns all cookies that will be used to communicate with foreign systems.",
        "operationId" : "getCookies",
        "responses" : {
          "200" : {
            "description" : "Returns all cookies associated with the instance token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientCookie"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Viewer" ],
        "summary" : "Adds a new cookie to the viewer",
        "description" : "Returns all cookies that will be used to communicate with foreign systems.",
        "operationId" : "postCookie",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostViewerDocumentCookieParams"
              }
            }
          }
        },
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Viewer" ],
        "summary" : "Deletes all cookies",
        "description" : "Deletes all cookies.",
        "operationId" : "deleteCookies",
        "responses" : {
          "200" : {
            "description" : "Returns all cookies associated with the instance token."
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/document/dynamicsignaturefields" : {
      "post" : {
        "tags" : [ "Viewer" ],
        "summary" : "Adds signature field(s) to loaded document",
        "description" : "Adds one or N signatures fields to the currently loaded document. The signature(s) will be placed dependent by the keyword occurrence in the document. The recursive flag decides if a signature field is placed at the first or all occurances of the given keyword in the document.",
        "operationId" : "postViewerDocumentDynamicSignaturefield",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostDynamicSignaturefieldParams"
              }
            }
          }
        },
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/document/staticsignaturefields" : {
      "post" : {
        "tags" : [ "Viewer" ],
        "summary" : "Adds signature field to loaded document",
        "description" : "Adds a single signature field to the currently loaded document.",
        "operationId" : "postViewerDocumentDynamicSignaturefield_1",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostStaticSignaturefieldParams"
              }
            }
          }
        },
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/cookies/{cookieId}" : {
      "patch" : {
        "tags" : [ "Viewer" ],
        "summary" : "Patches a cookie to the viewer",
        "description" : "Updates the cookie with the given index.",
        "operationId" : "patchCookie",
        "parameters" : [ {
          "name" : "cookieId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchViewerDocumentParams"
              }
            }
          }
        },
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/document/signaturefieldproperties" : {
      "get" : {
        "tags" : [ "Viewer" ],
        "summary" : "Gets the additional properties to all signatrue fields",
        "description" : "Gets the additional properties to all signature fields.",
        "operationId" : "getViewerDocumentSignaturefieldProperties",
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Viewer" ],
        "summary" : "Append additional options to specific signature fields",
        "description" : "After loading a document over the viewerdocument-resource, it is possible to add a custom behavior to specific signature fields. A signature field can be targeted by its field name or a combination of tab order and page number.",
        "operationId" : "postViewerDocumentSignaturefieldProperties",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostSignaturefieldPropertiesParams"
              }
            }
          }
        },
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/accessurl" : {
      "post" : {
        "tags" : [ "Viewer" ],
        "summary" : "Issues viewer access URL",
        "description" : "Issues a URL which can be called once and leads to the associated viewer instance. Once the given access URL is called it gets invalidated.",
        "operationId" : "getViewerAccessUrl",
        "responses" : {
          "200" : {
            "description" : "Access URL to the instance token associated viewer instance.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/configuration" : {
      "get" : {
        "tags" : [ "Viewer" ],
        "summary" : "Gets viewer configuration",
        "description" : "Gets the current viewerconfiguration as JSON string.",
        "operationId" : "getViewerConfiguration",
        "responses" : {
          "200" : {
            "description" : "Returns the current viewer configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ViewerConfiguration"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Viewer" ],
        "summary" : "Alters viewer configuration",
        "description" : "Changes separate properties of the current viewer configuration.",
        "operationId" : "patchViewerConfiguration",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchViewerConfigurationParams"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns the altered viewer configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ViewerConfiguration"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/document/information" : {
      "get" : {
        "tags" : [ "Viewer" ],
        "summary" : "Gets informations about the currently loaded document",
        "description" : "Gets informations about the currently loaded document.",
        "operationId" : "getViewerDocumentInfos",
        "responses" : {
          "200" : {
            "description" : "An Object containing informations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentSummary"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/document" : {
      "get" : {
        "tags" : [ "Viewer" ],
        "summary" : "Gets the currently loaded document",
        "description" : "Gets the currently loaded document.",
        "operationId" : "getViewerDocument",
        "responses" : {
          "200" : {
            "description" : "The bytes of the queried document.",
            "content" : {
              "application/pdf" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Viewer" ],
        "summary" : "Loads a stored document",
        "description" : "Loads a stored document from the database.",
        "operationId" : "putViewerDocument",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "documentid" : {
                    "type" : "integer",
                    "description" : "The document id to be loaded from the database",
                    "format" : "int32"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a ClientViewerMessages object containing eventually occurring messages.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientViewerMessages"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Viewer" ],
        "summary" : "Loads a not persisted document",
        "description" : "Loads a not persisted document by various sources like URLs or direct uploaded files.",
        "operationId" : "postViewerDocument",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostViewerDocumentParams"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a map of potential appearing errors and warnings that may occur during the load process",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientViewerMessages"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Viewer" ],
        "summary" : "Unloads document",
        "description" : "Unloads the currently loaded document from associated viewer instance.",
        "operationId" : "deleteViewerDocument",
        "responses" : {
          "200" : {
            "description" : "The document were closed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/document/configuration" : {
      "get" : {
        "tags" : [ "Viewer" ],
        "summary" : "Gets document configuration",
        "description" : "Gets document specific configurations like special behavior for formular and signature fields.",
        "operationId" : "getViewerDocumentConfiguration",
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/document/pages" : {
      "get" : {
        "tags" : [ "Viewer" ],
        "summary" : "Gets rendered pages",
        "description" : "Gets rendered pages as Base64 encoded images.",
        "operationId" : "getViewerDocumentPageImages",
        "parameters" : [ {
          "name" : "pageRange",
          "in" : "query",
          "description" : "A page range. Not supposed to be used with path parameter {page}.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "The height, the page is rendered with.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "width",
          "in" : "query",
          "description" : "The width, the page is rendered with.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "factor",
          "in" : "query",
          "description" : "The factor, the page is rendered with.",
          "schema" : {
            "type" : "number",
            "format" : "double"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A json array containing the image data as Base64 encoded strings.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    },
    "/viewer/document/signaturefields" : {
      "get" : {
        "tags" : [ "Viewer" ],
        "summary" : "Gets all signature fields",
        "description" : "Gives an array of all signature fields of the currently loaded document.",
        "operationId" : "getViewerDocumentSignaturefields",
        "responses" : {
          "403" : {
            "description" : "Access denied"
          }
        },
        "security" : [ {
          "InstanceToken" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "DocumentDbe" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "parentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ownerId" : {
            "type" : "string"
          },
          "fileName" : {
            "type" : "string"
          },
          "screenName" : {
            "type" : "string"
          },
          "fileSize" : {
            "type" : "integer",
            "format" : "int64"
          },
          "timestampCreation" : {
            "type" : "string",
            "format" : "date-time"
          },
          "timestampModification" : {
            "type" : "string",
            "format" : "date-time"
          },
          "locked" : {
            "type" : "boolean"
          },
          "sharingCasesIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "idByReflextion" : {
            "type" : "object"
          }
        },
        "writeOnly" : true
      },
      "PostDocumentParams" : {
        "type" : "object",
        "properties" : {
          "document" : {
            "type" : "string",
            "description" : "Document file data",
            "format" : "binary"
          },
          "ownerId" : {
            "type" : "string",
            "description" : "The id of the document owner (usually the user name)"
          },
          "fileName" : {
            "type" : "string",
            "description" : "File name of the Document"
          },
          "screenName" : {
            "type" : "string",
            "description" : "Screen name of the document"
          },
          "template" : {
            "type" : "boolean"
          }
        },
        "description" : "Parameter bean for posting a new document."
      },
      "SharingCaseDbe" : {
        "type" : "object",
        "properties" : {
          "document" : {
            "$ref" : "#/components/schemas/DocumentDbe"
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "access_code" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "creation_timestamp" : {
            "type" : "string",
            "format" : "date-time"
          },
          "saved_timestamp" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "PostKeystoreAssignmentParams" : {
        "type" : "object",
        "properties" : {
          "ownerId" : {
            "type" : "string",
            "description" : "The id of the user (user name)."
          },
          "keystoreDataId" : {
            "type" : "integer",
            "description" : "The id of the keystore to be assigned.",
            "format" : "int32"
          },
          "privateKeyPassword" : {
            "type" : "string",
            "description" : "A private key password."
          },
          "alias" : {
            "type" : "string",
            "description" : "A alias to the desired keystore entry."
          },
          "active" : {
            "type" : "boolean",
            "description" : "Declare this assignment as the one to be used for the given purpose."
          },
          "purpose" : {
            "type" : "string",
            "description" : "The purpose of the assignment.",
            "enum" : [ "SIGNING", "SIGNATURE_ENCRYPTION" ]
          }
        },
        "description" : "Parameter bean for posting a keystore assignment."
      },
      "PostKeystoreParams" : {
        "required" : [ "keystoreType" ],
        "type" : "object",
        "properties" : {
          "keystore" : {
            "type" : "string",
            "description" : "The keystore file data.",
            "format" : "binary"
          },
          "keystoreType" : {
            "type" : "string",
            "description" : "The keystore type."
          },
          "keystorePassword" : {
            "type" : "string",
            "description" : "The password to the keystore.",
            "format" : "password"
          }
        },
        "description" : "Parameter bean for posting a new keystore."
      },
      "PatchSharingcaseParams" : {
        "type" : "object",
        "properties" : {
          "accessId" : {
            "type" : "string",
            "description" : "The access id of the sharing case to be used in the URL."
          },
          "documentId" : {
            "type" : "string",
            "description" : "The id of the document to be shared."
          },
          "password" : {
            "type" : "string",
            "description" : "An optional password to protect the sharing case. If no password is given, the sharing case will not promt a password dialog."
          },
          "comment" : {
            "type" : "string",
            "description" : "A optional comment to the sharing case."
          }
        },
        "description" : "Parameter bean for patching a sharing case."
      },
      "PostSharingcaseParams" : {
        "type" : "object",
        "properties" : {
          "accessId" : {
            "type" : "string",
            "description" : "The access id of the sharing case to be used in the URL."
          },
          "documentId" : {
            "type" : "string",
            "description" : "The id of the document to be shared."
          },
          "password" : {
            "type" : "string",
            "description" : "An optional password to protect the sharing case. If no password is given, the sharing case will not promt a password dialog."
          },
          "comment" : {
            "type" : "string",
            "description" : "A optional comment to the sharing case."
          }
        },
        "description" : "Parameter bean for posting a sharing case."
      },
      "ClientCookie" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "path" : {
            "type" : "string"
          }
        }
      },
      "PostDynamicSignaturefieldParams" : {
        "required" : [ "keyword" ],
        "type" : "object",
        "properties" : {
          "width" : {
            "type" : "integer",
            "description" : "The width of the signature field.",
            "format" : "int32"
          },
          "height" : {
            "type" : "integer",
            "description" : "The height of the signature field.",
            "format" : "int32"
          },
          "mandatory" : {
            "type" : "boolean",
            "description" : "Decides if the signature field will be mandatory."
          },
          "signer" : {
            "type" : "string",
            "description" : "Title lines shown in the signature capture dialog. Also the signer value is used to generate a unique field name in the pdf."
          },
          "xoffset" : {
            "type" : "integer",
            "description" : "The horizontal offset fot the signature position.",
            "format" : "int32"
          },
          "yoffset" : {
            "type" : "integer",
            "description" : "The vertical offset for the signature position.",
            "format" : "int32"
          },
          "recursive" : {
            "type" : "boolean",
            "description" : "Decides if a dynamic signature field will be placed at the first occurrence of a given keyword or at any occurrence."
          },
          "keyword" : {
            "type" : "string",
            "description" : "The string where the signature will be placed at in the document."
          }
        },
        "description" : "Parameter bean for posting a dynamic signature field to the loaded document."
      },
      "PostStaticSignaturefieldParams" : {
        "type" : "object",
        "properties" : {
          "width" : {
            "type" : "integer",
            "description" : "The width of the signature field.",
            "format" : "int32"
          },
          "height" : {
            "type" : "integer",
            "description" : "The height of the signature field.",
            "format" : "int32"
          },
          "mandatory" : {
            "type" : "boolean",
            "description" : "Decides if the signature field will be mandatory."
          },
          "signer" : {
            "type" : "string",
            "description" : "Title lines shown in the signature capture dialog. Also the signer value is used to generate a unique field name in the pdf."
          },
          "posX" : {
            "type" : "integer",
            "description" : "The horizontal position of the signature field.",
            "format" : "int32"
          },
          "posY" : {
            "type" : "integer",
            "description" : "The vertical position of the signature field.",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The page number where the signature field should be placed.",
            "format" : "int32"
          }
        },
        "description" : "Parameter bean for posting a static signature field to the loaded document."
      },
      "PostViewerDocumentCookieParams" : {
        "required" : [ "domain", "name", "path" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the cookie."
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the cookie."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the cookie."
          },
          "path" : {
            "type" : "string",
            "description" : "The path of the cookie."
          }
        },
        "description" : "Parameter bean for posting a cookie."
      },
      "PatchViewerDocumentParams" : {
        "required" : [ "domain", "name", "path" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the cookie."
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the cookie."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the cookie."
          },
          "path" : {
            "type" : "string",
            "description" : "The path of the cookie."
          }
        },
        "description" : "Parameter bean for updating a cookie."
      },
      "PostSignaturefieldPropertiesParams" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "The name of the signature field within the pdf. If fieldName is not set, pageNumber AND \r\ntabOrder must be set to identify a signature field in the pdf."
          },
          "tabOrder" : {
            "type" : "integer",
            "description" : "The tab order of the signature field within the pdf. Together with the pageNumber property,  \r\nit identifies a signature field in the pdf. If taborder and pagenumber are not set, fieldName\r\nproberty must be set.",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The page number on which the signature field stands. Together with the tabOrder property, it \r\nidentifies a signature field in the pdf. If tabOrder and pageNumber are not set, fieldName   \r\nproberty must be set.",
            "format" : "int32"
          },
          "isShown" : {
            "type" : "boolean",
            "description" : "A flag that decides whether or not the meant signature field is shown in the signoSign/Universal viewer."
          }
        },
        "description" : "Parameter bean for posting additional signature field properties to the loaded document."
      },
      "ViewerConfiguration" : {
        "type" : "object",
        "properties" : {
          "manuallyAddingOfSignaturesAllowed" : {
            "type" : "boolean"
          },
          "signatureTextEnabled" : {
            "type" : "boolean"
          },
          "signatureText" : {
            "type" : "string"
          },
          "signatureTextDateTimeFormat" : {
            "type" : "string"
          },
          "signatureBackgroundTransparancy" : {
            "type" : "string",
            "enum" : [ "NEVER", "ALWAYS", "AUTO" ]
          },
          "documentSharing" : {
            "type" : "boolean"
          },
          "autosaveMode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "signButtonsVisibilityMode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "autoSignStartMode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "autoSignStartFieldName" : {
            "type" : "string"
          },
          "signatureTextHorizontalAlign" : {
            "type" : "string",
            "enum" : [ "RIGHT", "CENTER", "LEFT" ]
          },
          "signatureTextVerticalAlign" : {
            "type" : "string",
            "enum" : [ "BOTTOM", "CENTER", "TOP" ]
          },
          "allowSignfieldSelection" : {
            "type" : "boolean"
          },
          "referrerUrl" : {
            "type" : "string"
          },
          "saveUrl" : {
            "type" : "string"
          },
          "fullscreenSignatureDialog" : {
            "type" : "boolean"
          },
          "signPadDocumentView" : {
            "type" : "boolean"
          },
          "signPadDocumentViewScalingFactor" : {
            "type" : "integer",
            "format" : "int32"
          },
          "signPadDocumentViewMarginLeft" : {
            "type" : "integer",
            "format" : "int32"
          },
          "signPadDocumentViewMarginTop" : {
            "type" : "integer",
            "format" : "int32"
          },
          "autoShowDocumentOnPad" : {
            "type" : "boolean"
          },
          "padEncryption" : {
            "type" : "string",
            "enum" : [ "NEVER", "IFSUPPORTED", "ALWAYS" ]
          }
        }
      },
      "PatchViewerConfigurationParams" : {
        "type" : "object",
        "properties" : {
          "manuallyAddingOfSignaturesAllowed" : {
            "type" : "boolean",
            "description" : "Decides if the sharing functionality is permitted or not"
          },
          "signatureTextEnabled" : {
            "type" : "boolean",
            "description" : "Decides if the time stamp text should be rendered into the signature image."
          },
          "signatureText" : {
            "type" : "string",
            "description" : "The property for setting the signature's time stamp text format."
          },
          "signatureTextDateTimeFormat" : {
            "type" : "string",
            "description" : "The property for setting the signature's time stamp format."
          },
          "documentSharing" : {
            "type" : "boolean",
            "description" : "The flag for enabling document sharing or not."
          },
          "autosaveMode" : {
            "type" : "integer",
            "description" : "The auto save mode.",
            "format" : "int32"
          },
          "signButtonsVisibilityMode" : {
            "type" : "integer",
            "description" : "The visibility mode of the two existing sign buttons.",
            "format" : "int32"
          },
          "autoSignStartMode" : {
            "type" : "integer",
            "description" : "The automated signature start mode.",
            "format" : "int32"
          },
          "autoSignStartFieldName" : {
            "type" : "string",
            "description" : "The signature field name to set if ASSM_NAMED_SIG_FIELD is used."
          },
          "padEncryption" : {
            "type" : "string",
            "description" : "Defines if encryption of the signature data should be done by the pad.",
            "enum" : [ "NEVER", "IFSUPPORTED", "ALWAYS" ]
          },
          "signatureTextHorizontalAlign" : {
            "type" : "string",
            "description" : "Decides about the horizontal alignment of the signature text.",
            "enum" : [ "RIGHT", "CENTER", "LEFT" ]
          },
          "signatureTextVerticalAlign" : {
            "type" : "string",
            "description" : "Decides about the vertical alignment of the signature text.",
            "enum" : [ "BOTTOM", "CENTER", "TOP" ]
          },
          "signatureBackgroundTransparancy" : {
            "type" : "string",
            "description" : "The flag indicating if signature background must be rendered transparent.",
            "enum" : [ "NEVER", "ALWAYS", "AUTO" ]
          },
          "allowSignfieldSelection" : {
            "type" : "boolean",
            "description" : "Decides whether or not a user is able to manually select a signature field to sign."
          },
          "referrerUrl" : {
            "type" : "string",
            "description" : "The URL which is called by using the back-button."
          },
          "fullscreenSignatureDialog" : {
            "type" : "boolean",
            "description" : "Decides whether or not the signature dialog is presented in full screen."
          },
          "saveUrl" : {
            "type" : "string",
            "description" : "The url to upload a document to, when clicking the save button. If the url is protected, the customer-session-cookie(csc) must be set to authenticate the request."
          }
        },
        "description" : "Parameter bean for patching the viewer configuration."
      },
      "DocumentSummary" : {
        "type" : "object",
        "properties" : {
          "documentId" : {
            "type" : "string"
          },
          "signatureFieldCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "signedSignatureFieldCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "signedMandatorySignatureFieldCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "formFieldCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "filledInFormFieldCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "filledInMandatoryFormFieldCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "signatureFields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SignaturefieldSummary"
            }
          },
          "formFields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FormFieldSummary"
            }
          }
        }
      },
      "FormFieldSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "positionX" : {
            "type" : "integer",
            "format" : "int32"
          },
          "positionY" : {
            "type" : "integer",
            "format" : "int32"
          },
          "width" : {
            "type" : "integer",
            "format" : "int32"
          },
          "height" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "tabOrder" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fieldOrder" : {
            "type" : "integer",
            "format" : "int32"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "SignaturefieldSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "positionX" : {
            "type" : "integer",
            "format" : "int32"
          },
          "positionY" : {
            "type" : "integer",
            "format" : "int32"
          },
          "width" : {
            "type" : "integer",
            "format" : "int32"
          },
          "height" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "tabOrder" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fieldOrder" : {
            "type" : "integer",
            "format" : "int32"
          },
          "value" : {
            "type" : "string"
          },
          "signed" : {
            "type" : "boolean"
          },
          "shown" : {
            "type" : "boolean"
          }
        }
      },
      "ClientViewerMessage" : {
        "type" : "object",
        "properties" : {
          "severity" : {
            "type" : "string",
            "enum" : [ "ERROR", "INFO" ]
          },
          "messageOrMessageKey" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "ClientViewerMessages" : {
        "type" : "object",
        "properties" : {
          "invalidViewerCallMessage" : {
            "$ref" : "#/components/schemas/ClientViewerMessage"
          },
          "noPdfMessage" : {
            "$ref" : "#/components/schemas/ClientViewerMessage"
          },
          "userMessage" : {
            "$ref" : "#/components/schemas/ClientViewerMessage"
          },
          "documentChangedAfterSignatureMessage" : {
            "$ref" : "#/components/schemas/ClientViewerMessage"
          },
          "denyServiceMessage" : {
            "$ref" : "#/components/schemas/ClientViewerMessage"
          }
        }
      },
      "PostViewerDocumentParams" : {
        "type" : "object",
        "properties" : {
          "document" : {
            "type" : "string",
            "description" : "Document file data",
            "format" : "binary"
          },
          "fileName" : {
            "type" : "string",
            "description" : "Document file name"
          },
          "pdfUrl" : {
            "type" : "string",
            "description" : "URL to a pdf document"
          }
        },
        "description" : "Parameter bean for posting a document to the viewer."
      }
    },
    "securitySchemes" : {
      "InstanceToken" : {
        "type" : "apiKey",
        "name" : "Authorization",
        "in" : "header"
      }
    }
  }
}